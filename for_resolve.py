import sys
import shutil
import os
import time
from datetime import datetime, timedelta
import json
import traceback
import glob

sys.path.append('C:\\ProgramData\\Blackmagic Design\\DaVinci Resolve\\Support\\Developer\\Scripting\\Modules\\')

"""
Example DaVinci Resolve script:
Display project information: timeline, clips within timelines and media pool structure.
Example usage: 5_get_project_information.py
"""

from python_get_resolve import GetResolve

def DisplayTimelineTrack( timeline, trackType, displayShift ):
    trackCount = timeline.GetTrackCount(trackType)
    for index in range (1, int(trackCount) + 1):
        print(displayShift + "- " + trackType + " " + str(index))
        clips = timeline.GetItemListInTrack(trackType, index)
        for clip in clips:
            print(displayShift + "    " + clip.GetName())
    return

def DisplayTimelineInfo( timeline, displayShift ):
    print(displayShift + "- " + timeline.GetName())
    displayShift = "  " + displayShift
    DisplayTimelineTrack(timeline , "video", displayShift)
    DisplayTimelineTrack(timeline , "audio", displayShift)
    DisplayTimelineTrack(timeline , "subtitle", displayShift)
    return

def DisplayTimelinesInfo( project ):
    print("- Timelines")
    timelineCount = project.GetTimelineCount()

    for index in range (0, int(timelineCount)):
        DisplayTimelineInfo(project.GetTimelineByIndex(index + 1), "  ")
    return

def DisplayFolderInfo( folder, displayShift ):
    print(displayShift + "- " + folder.GetName())
    clips = folder.GetClipList()
    for clip in clips:
        print(displayShift + "  " + clip.GetClipProperty("File Name"))

    displayShift = "  " + displayShift

    folders = folder.GetSubFolderList()
    for folder in folders:
        DisplayFolderInfo(folder, displayShift)
    return

def DisplayMediaPoolInfo( project ):
    mediaPool = project.GetMediaPool()
    print("- Media pool")
    DisplayFolderInfo(mediaPool.GetRootFolder(), "  ")
    return

def DisplayProjectInfo( project ):
    print("-----------")
    print("Project '" + project.GetName() +"':")
    print("  Framerate " + str(project.GetSetting("timelineFrameRate")))
    print("  Resolution " + project.GetSetting("timelineResolutionWidth") + "x" + project.GetSetting("timelineResolutionHeight"))

    DisplayTimelinesInfo(project)
    print("")
    DisplayMediaPoolInfo(project)
    return


def get_timeline_items(text, timeline):
    
    print(timeline.GetName())

    timelineItem = timeline.InsertFusionTitleIntoTimeline("Text+")
    print(timelineItem)
    print(timelineItem.GetProperty(1)) 
    toolList = timelineItem.GetFusionCompByIndex(1).GetToolList() 
    toolList[1].Name = text
    toolList[1].StyledText = text
    toolList[1].Font = "Hiragino Kaku Gothic StdN"
    toolList[1].Style = "W8"
    toolList[1].Size = 0.05

    # 文字の縁取り
    toolList[1].Enabled2 = 1
    toolList[1].Thickness2 = 0.08
    toolList[1].Red2 = 0
    toolList[1].Green2 = 0
    toolList[1].Blue2 = 0
    toolList[1].Alpha2 = 1
    toolList[1].Center = {1: 0.5, 2: 0.15}

    # 背景色
    toolList[1].Enabled4 = 1
    toolList[1].Red4 = 0
    toolList[1].Green4 = 0
    toolList[1].Blue4 = 0
    toolList[1].Alpha4 = 0.4
    toolList[1].Level4 = 1 #Line
    toolList[1].ExtendHorizontal4 = 2.0
    toolList[1].ExtendVertical4 = 0.2
    toolList[1].SizeX4 = 5.0

   

def Export(timeline, filePath, exportType, exportSubType=None):
    result = None
    if exportSubType is None:
        result = timeline.Export(filePath, exportType)
    else:
        result = timeline.Export(filePath, exportType, exportSubType)

    if result:
        print("Timeline exported to {0} successfully.".format(filePath))
    else:
        print("Timeline export failed.")


if __name__ == '__main__':
    # exec(open("path\\for_resolve.py", encoding='utf-8').read())

    shorts = False
    framerate = 30

    width = 1920
    height = 1080

    if shorts:
        width = 1080
        height = 1920

    project_name = 'sample-template'
    wave_files_path = 'pathto/sample-assets/' 
    wave_files = glob.glob(wave_files_path + '*.wav')
    
    resolve = GetResolve()
    project_manager = resolve.GetProjectManager()
    #project = project_manager.CreateProject(project_name)
    project = project_manager.GetCurrentProject()

    if not project:
        print("Unable to create a project")
        sys.exit()

    project.SetSetting("timelineFrameRate", str(framerate))
    project.SetSetting("timelineResolutionWidth", str(width))
    project.SetSetting("timelineResolutionHeight", str(height))

    mediapool = project.GetMediaPool()
    storage = resolve.GetMediaStorage()

    timeline_name = "AutoGeneratedTimeline 1"
    timeline = mediapool.CreateEmptyTimeline(timeline_name)
    
    if not timeline:
        print("Unable to create timeline '" + timeline_name + "'")
        sys.exit()

    # timeline.SetCurrentTimecode("01:00:10:00")

    for wav_file in wave_files:
        clip = storage.AddItemsToMediaPool(wav_file)
        timecode = timeline.GetCurrentTimecode()  
        print(timecode, wav_file, clip)
        timelineItem = mediapool.AppendToTimeline(clip)


    # timeline.SetCurrentTimecode("01:00:00:00")
    for wav_file in wave_files:
        text = ''
        textpath = wav_file.replace('.wav', '.txt')
        with open(textpath, encoding='utf-8') as f:
            text = f.read()
        get_timeline_items(text, timeline)

    #Export(timeline, "C:\\Users\\ctrl\\Desktop\\VOICEVOX2FCPXML\\hoge.xml", resolve.EXPORT_FCP_7_XML, resolve.EXPORT_NONE)
